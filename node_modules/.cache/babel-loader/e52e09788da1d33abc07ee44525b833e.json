{"ast":null,"code":"import _slicedToArray from \"/home/smokyn/Documents/thegithubfinder/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/smokyn/Documents/thegithubfinder/src/App.js\";\nimport React, { useState, Fragment } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Users from \"./components/users/Users\";\nimport Search from \"./components/users/Search\";\nimport Alert from \"./components/layout/Alert\";\nimport About from \"./components/pages/About\";\nimport User from \"./components/users/User\";\nimport axios from \"axios\";\nimport GithubState from \"./context/github/GithubState\";\nimport \"./App.css\";\n\nconst App = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        repos = _useState2[0],\n        setRepos = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        alert = _useState4[0],\n        setAlert = _useState4[1]; // Get User Repos\n\n\n  const getUserRepos = async username => {\n    setLoading(true);\n    const res = await axios.get(`https://api.github.com/users/${username}/repos?per_page=5&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`);\n    setRepos(res.data);\n    setLoading(false);\n  }; // Set Alert\n\n\n  const showAlert = (msg, type) => {\n    setAlert({\n      msg,\n      type\n    });\n    setTimeout(() => setAlert(null), 5000);\n  };\n\n  return React.createElement(GithubState, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Alert, {\n    alert: alert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: props => React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Search, {\n      setAlert: showAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(Users, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/about\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, About), React.createElement(Route, {\n    exact: true,\n    path: \"/user/:login\",\n    render: props => React.createElement(User, Object.assign({}, props, {\n      getUserRepos: getUserRepos,\n      repos: repos,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }))))));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/smokyn/Documents/thegithubfinder/src/App.js"],"names":["React","useState","Fragment","BrowserRouter","Router","Switch","Route","Navbar","Users","Search","Alert","About","User","axios","GithubState","App","repos","setRepos","alert","setAlert","getUserRepos","username","setLoading","res","get","process","env","REACT_APP_GITHUB_CLIENT_ID","REACT_APP_GITHUB_CLIENT_SECRET","data","showAlert","msg","type","setTimeout","props"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Users from \"./components/users/Users\";\nimport Search from \"./components/users/Search\";\nimport Alert from \"./components/layout/Alert\";\nimport About from \"./components/pages/About\";\nimport User from \"./components/users/User\";\nimport axios from \"axios\";\nimport GithubState from \"./context/github/GithubState\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [repos, setRepos] = useState([]);\n  const [alert, setAlert] = useState(null);\n\n  // Get User Repos\n  const getUserRepos = async username => {\n    setLoading(true);\n\n    const res = await axios.get(\n      `https://api.github.com/users/${username}/repos?per_page=5&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n    );\n\n    setRepos(res.data);\n    setLoading(false);\n  };\n\n  // Set Alert\n  const showAlert = (msg, type) => {\n    setAlert({ msg, type });\n    setTimeout(() => setAlert(null), 5000);\n  };\n\n  return (\n    <GithubState>\n      <Router>\n        <div className='App'>\n          <Navbar />\n          <div className='container'>\n            <Alert alert={alert} />\n            <Switch>\n              <Route\n                exact\n                path='/'\n                render={props => (\n                  <Fragment>\n                    <Search setAlert={showAlert} />\n                    <Users />\n                  </Fragment>\n                )}\n              />\n              <Route exact path='/about'>\n                {About}\n              </Route>\n              <Route\n                exact\n                path='/user/:login'\n                render={props => (\n                  <User {...props} getUserRepos={getUserRepos} repos={repos} />\n                )}\n              ></Route>\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </GithubState>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}